pf[i] <- anova(lm(mpg ~ am, mtcars), lm(mtcars$mpg ~ mtcars$am + mtcars[j]))
}
}
for (j in var) {
pf[i] <- anova(lm(mpg ~ am, mtcars), lm(mtcars$mpg ~ mtcars$am + mtcars[j]))
}
mtcars[j]
for (i in 1:9) {
for (j in var) {
pf[i] <- anova(lm(mpg ~ am, mtcars), lm(mtcars$mpg ~ mtcars$am + paste(mtcars[j])))
}
}
for (i in 1:9) {
for (j in var) {
pf[i] <- anova(lm(mpg ~ am, mtcars), lm(mtcars$mpg ~ mtcars$am + mtcars[paste(names(mtcars)[j])]))
}
}
head(mtcars[paste(names(mtcars)[j])])
?step
?mtcars
step(mdlall, direction = "both")
mdlall <- lm(mpg ~ ., mtcars)
bestmdl <- step(mdlall, direction = "both")
summary(bestmdl)
?mfrow
?margin
?plot
?mtcars
summary(bestmdl)
summary(bestmdl)$adjusted.r.squared
summary(bestmdl)$r.squared
?summary
?lm
summary(bestmdl)$adj.r.squared
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling); library(caret)
library(ElemStatLearn); library(pgmm); library(rpart)
data(segmentationOriginal)
set.seed(125)
dim(segmentationOriginal)
inTrain1 <- createDataPartition(y = segmentationOriginal$Case, p = 0.6, list = FALSE)
train1 <- segmentationOriginal[inTrain, ]
train1 <- segmentationOriginal[inTrain1, ]
test1 <- segmentationOriginal[-inTrain1, ]
mdl1 <- train(Case ~ ., data = train1, method = "rpart")
install.packages("e1071")
mdl1 <- train(Case ~ ., data = train1, method = "rpart")
predict(mdl1$finalModel, TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1 = 2)
print(mdl1$finalModel)
names(testa) <- c(TotalIntench2, FiberWidthCh1, PerimStatusCh1)
names(testa) <- c("TotalIntench2", "FiberWidthCh1", "PerimStatusCh1")
testa <- data.frame
names(testa) <- c("TotalIntench2", "FiberWidthCh1", "PerimStatusCh1")
testa <- data.frame()
names(testa) <- c("TotalIntench2", "FiberWidthCh1", "PerimStatusCh1")
dim(testa) <- c(2, 3)
summary(train1$Case)
summary(segmentationOriginal$Case)
data(segmentationOriginal)
inTrain1 <- createDataPartition(y = segmentationOriginal$Case, p = 0.6, list = FALSE)
train1 <- segmentationOriginal[inTrain1, ]
test1 <- segmentationOriginal[-inTrain1, ]
set.seed(125)
data(segmentationOriginal)
rm(inTrain1)
rm(test1)
rm(testa)
rm(mdl1)
rm(train1)
data("segmentationOriginal")
?subset
train1 <- subset(segmentationOriginal, Case == "train")
train1 <- subset(segmentationOriginal, Case == "Train")
test1 <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
mdl1 <- train(Class ~ ., method = "rpart", data = train1)
print(mdl1$finalModel)
## PS, WS, PS, Not possible to predict
data(olive)
olive = olive[, -1]
head(olive)
mdl3 <- train(Area ~., method = "rpart", data = olive)
newdata3 = as.data.frame(t(colMeans(olive)))
t(colMeans(olive))
colMeans(olive)
predict(mdl3, newdata = newdata3)
training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
testing <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
library(caret)
library(randomForest)
training <- training[, -c(1:7)]
factorCol <- logical(ncol(training))
for (i in 1:(ncol(training)-1)) {
factorCol[i] <- (class(training[,i ]) == "factor")
}
numTrain <- training
for (i in (1:ncol(training))[factorCol]) {
numTrain[, i] <- as.numeric(as.character(training[, i]))
}
wanted <- logical(ncol(numTrain))
for (i in 1:ncol(numTrain)) {
wanted[i] <- (sum(is.na(numTrain[, i])) == 0)
}
newTrain <- numTrain[, wanted]
str(newTrain)
# Point C: create train, test and validation sets
set.seed(12345)
inTrain <- createDataPartition(y = newTrain$classe, p = 0.6, list = FALSE)
subTrain <- newTrain[inTrain, ]
subTest <- newTrain[-inTrain, ]
finalMdl <- randomForest(classe ~ ., data = newTrain, method = "class")
prediction
prediction <- predict(finalMdl, testing)
prediction
library(shiny)
install.packages("siny")
install.packages("shiny")
library(shiny)
install.packages("miniUI")
library(miniUI)
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Pointsby Dragging your Mouse")
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X", xlab = "X", lab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush, xvar = "X", yvar = "Y"))
})
}
}
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Pointsby Dragging your Mouse")
miniContentPanel(plotOutput("plot", height = "100%", brush = "brush"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X", xlab = "X", lab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush, xvar = "X", yvar = "Y"))
})
}
}
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Pointsby Dragging your Mouse"),
miniContentPanel(plotOutput("plot", height = "100%", brush = "brush"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X", xlab = "X", lab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush, xvar = "X", yvar = "Y"))
})
}
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
install.packages("leaflet")
library(leaflet)
data(state)
head(state)
library(datasets)
load(state)
data(state)
statedata <- cbind(data.frame(state.x77), state.abb, state.center, state.division, state.name, state.region)
head(statedata, 1)
head(state.center)
head(data.frame(state.center))
head(state.center$x)
income_map <- data.frame(lat = state.center$x,
lng = state.center$y) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(
radius = sqrt(statedata$Income) * 150,
color = statedata$HS.Grad
)
income_map
income_map <- data.frame(lat = state.center$x,
lng = state.center$y) %>%
leaflet() %>%
addTiles()
income_map
income_map <- data.frame(lat = state.center$x,
lng = state.center$y) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(
radius = sqrt(statedata$Income) * 150
)
income_map
income_map <- data.frame(lat = state.center$x,
lng = state.center$y) %>%
leaflet() %>%
addTiles() %>%
addMarkers()
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addMarkers()
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(radius = statedata$HS.Grad)
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(radius = sqrt(statedata$HS.Grad)*150)
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(radius = sqrt(statedata$HS.Grad)*30)
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(radius = sqrt(statedata$HS.Grad))
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(weight = 0.5, radius = ((statedata$HS.Grad)^2)/1000)
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(weight = 0.5, radius = ((statedata$HS.Grad)^2)/500)
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(weight = 0.5, radius = ((statedata$HS.Grad)^2)/100)
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(weight = 0.5, radius = ((statedata$HS.Grad)^2)/10)
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(weight = 0.5, radius = ((statedata$HS.Grad)^2)/10)
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(weight = 0.5, radius = ((statedata$HS.Grad)^2))
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(weight = 0.5, radius = ((statedata$HS.Grad)^2))
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(weight = 0.5, radius = ((statedata$HS.Grad)^2)/250)
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles()
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet()
income_map
class(cbind(state.center$y, state.center$x))
head(data.frame(cbind(state.center$y, state.center$x)))
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addPopups(data.frame(cbind(state.center$y, state.center$x)),
paste(statedata$state.name, statedata$Income, statedata$HS.Grad))
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addPopups(lat = state.center$y,
lng = stat.center$x,
paste(statedata$state.name, statedata$Income, statedata$HS.Grad))
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addPopups(lat = state.center$y,
lng = state.center$x,
paste(statedata$state.name, statedata$Income, statedata$HS.Grad))
income_map
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addPopups(lat = state.center$y,
lng = state.center$x,
paste(statedata$state.name, "<br>",
"income per captica", statedata$Income, "<br>",
"High-Scheel Graduates (%)", statedata$HS.Grad))
income_map
?popupOptions
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addPopups(lat = state.center$y,
lng = state.center$x,
paste(statedata$state.name, "<br>",
"income per captica", statedata$Income, "<br>",
"High-Scheel Graduates (%)", statedata$HS.Grad),
options = list(riseOnHover = TRUE))
income_map
?market.bindPopup
?marker.bindPopup
?market.on
leaf <- leaflet() %>%
addTiles() %>%
addEasyButtonBar(
easyButton(
icon = htmltools::span(class='star','&starf;'),
onClick = JS("function(btn, map){ alert('Button 1');}")),
easyButton(
icon = htmltools::span(class='star','&target;'),
onClick = JS("function(btn, map){ alert('Button 2');}")))
leaf
leaflet() %>%
addTiles(group = "OpenStreetMap") %>%
addProviderTiles("Stamen.Toner", group = "Toner by Stamen") %>%
addMarkers(runif(20, -75, -74), runif(20, 41, 42), group = "Markers") %>%
addLayersControl(
baseGroups = c("OpenStreetMap", "Toner by Stamen"),
overlayGroups = c("Markers")
)
?hightlightOptions
?hightightOptions
?highlightOptions
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addPopups(lat = state.center$y,
lng = state.center$x,
paste(statedata$state.name, "<br>",
"income per captica", statedata$Income, "<br>",
"High-Scheel Graduates (%)", statedata$HS.Grad),
collapse = TRUE)
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = "x", popup = paste(statedata$state.name, statedata$state.abb, "<br>",
"Income per Captica", statedata$Income, "<br>",
"High-School Graduation Rate", statedata$HS.Grad))
income_map <- data.frame(lat = state.center$y,
lng = state.center$x) %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = paste(statedata$state.name, statedata$state.abb, "<br>",
"Income per Captica", statedata$Income, "<br>",
"High-School Graduation Rate", statedata$HS.Grad))
income_map
methods(colSums)
colSums
mean
methods(mean)
methods(predict)
methods(dgamma)
methods(lm)
methods(show)
install.packages(DDPQuiz3)
install.packages("DDPQuiz3")
setwd("~/Desktop/OneDrive/Documents/Data Science/Coursera Files/Course 09 Developing Data Products/week4")
unzip("WID_full_dataset/WID_fulldataset_TW.zip")
library(shiny)
runApp('~/BMI')
?textInput
?numericInput
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
?output
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
?numericOutput
?shiny
?shinyUI
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
result <- reactive ({
if(bmi < 18.5) "Underweight"
else if (bmi > 18.5 & bmi < 25) "Normal Weight"
else if (bmi > 25 & bmi < 30) "Overweight"
else if (bmi > 30) "Obese"
})
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
58/1.72^2
options(digits = 20)
58/1.72^2
options(digits = 2)
58/1.72^2
options(digits = 3)
58/1.72^2
runApp('~/BMI')
runApp('~/BMI')
127.9 / 67.7^2
127.9 / 67.7^2 * 703
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
table(1:10)
data.frame(1:10)
data.frame(1:10, 11:20)
cat <- c("Very Severely Underweight", "Severely Underweight", "Underweight",
"Normal (Healthy) Weight", "Overweight", "Obese Class I (Moderately Obese)",
"Obese Class II (Severly Obese)", "Obese Class III (Very Severely Obese)")
lower <- c("", 15, 16, 18.5, 25, 30, 35, 40)
higher <- c(15, 16, 18.5, 25, 30, 35, 40, "")
table(cat, lower, higher)
runApp('~/BMI')
runApp('~/BMI')
cat_df <- data.frame(category, from, to)
category <- c("Very Severely Underweight", "Severely Underweight", "Underweight",
"Normal (Healthy) Weight", "Overweight", "Obese Class I (Moderately Obese)",
"Obese Class II (Severly Obese)", "Obese Class III (Very Severely Obese)")
from <- c("", 15, 16, 18.5, 25, 30, 35, 40)
to <- c(15, 16, 18.5, 25, 30, 35, 40, "")
cat_df <- data.frame(category, from, to)
head(cat_df)
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
runApp('~/BMI')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='mewine-jmcc',
token='E94CAB939DFCB0CF073C92B3806EAD88',
secret='hcELNszF+UbVKzYiEDavcrrblbYDTRmvNoOXPi+K')
library(rsconnect)
runApp('~/BMI')
h <- 1.72
w <- 58
bmi <- w/h^2
if (bmi < 18.5) result <- "Underweight"
if (bmi > 18.5 & bmi < 25) result <- "Normal (Healthy) Weight"
if (bmi > 25 & bmi < 30) result <- "Overweight"
if (bmi > 30) result < -"Obese"
h <- 67
w <- 125
bmi2 <- w/h^2 * 703
if (bmi2 < 18.5) result2 <- "Underweight"
if (bmi2 > 18.5 & bmi2 < 25) result2 <- "Normal (Healthy) Weight"
if (bmi2 > 25 & bmi2 < 30) result2 <- "Overweight"
if (bmi2 > 30) result2 < -"Obese"
bmi <- reactive({
if (input$unit == "Metric") input$weight / (input$height^2)
else input$weight / (input$height^2) * 703
})
?knitr
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
